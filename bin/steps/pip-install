# Install dependencies with Pip.
puts-cmd "pip install -r requirements.txt"

# rewrite any existing egg links to point to the build dir so pip does not fail with a mismatch error
find .heroku/python/lib/python*/site-packages/ -name "*.egg-link" -print0 | xargs -r -0 -n 1 sed -i -e "s#/app/#$(pwd)/#"
find .heroku/python/lib/python*/site-packages/ -name "*.pth" -print0 | xargs -r -0 -n 1 sed -i -e "s#/app/#/$(pwd)/#"

[ ! ${FRESH_PYTHON:-} ] && bpwatch start pip_install
[ ${FRESH_PYTHON:-} ] && bpwatch start pip_install_first

if test -d $BUILD_DIR/vendor; then
  /app/.heroku/python/bin/pip install -r requirements.txt --exists-action=w --src=./.heroku/src --no-index --find-links=file://$BUILD_DIR/vendor | cleanup | indent
  cp requirements.txt .heroku/python/requirements-declared.txt
  /app/.heroku/python/bin/pip freeze --find-links=file://$BUILD_DIR/vendor --disable-pip-version-check > .heroku/python/requirements-installed.txt
else
  /app/.heroku/python/bin/pip install -r requirements.txt --exists-action=w --src=./.heroku/src | cleanup | indent

  cp requirements.txt .heroku/python/requirements-declared.txt
  /app/.heroku/python/bin/pip freeze > .heroku/python/requirements-installed.txt
fi

[ ! ${FRESH_PYTHON:-} ] && bpwatch stop pip_install
[ ${FRESH_PYTHON:-} ] && bpwatch stop pip_install_first

# rewrite build dir in egg links to /app so things are found at runtime
find .heroku/python/lib/python*/site-packages/ -name "*.egg-link" -print0 | xargs -r -0 -n 1 sed -i -e "s#$(pwd)/#/app/#"
find .heroku/python/lib/python*/site-packages/ -name "*.pth" -print0 | xargs -r -0 -n 1 sed -i -e "s#$(pwd)/#/app/#"

echo

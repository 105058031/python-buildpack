PYTHON_VERSION=$(cat runtime.txt)
PYTHON_VERSION=$($ROOT_DIR/bin/steps/libs/version.rb $ROOT_DIR/manifest.yml $PYTHON_VERSION)

# Install Python.
if [ -f .cloudfoundry/python-version ]; then
  if [ ! $(cat .cloudfoundry/python-version) = $PYTHON_VERSION ]; then
    puts-step "Found $(cat .cloudfoundry/python-version), removing"
    rm -fr .cloudfoundry/python
  else
    SKIP_INSTALL=1
  fi
fi

if [ ! $STACK = $CACHED_PYTHON_STACK ]; then
  rm -fr .cloudfoundry/python .cloudfoundry/python-stack .cloudfoundry/vendor
  unset SKIP_INSTALL
fi


if [ ! "$SKIP_INSTALL" ]; then
  puts-step "Installing $PYTHON_VERSION"

  # Prepare destination directory.
  mkdir -p .cloudfoundry/python

  exit_code=0
  url="https://lang-python.s3.amazonaws.com/$STACK/runtimes/$PYTHON_VERSION.tar.gz"

  filtered_url=$($ROOT_DIR/compile-extensions/bin/download_dependency $url /tmp) || exit_code=$?
  if [ $exit_code -ne 0 ]; then
    $ROOT_DIR/compile-extensions/bin/recommend_dependency $url
    exit 1
  fi
  $ROOT_DIR/compile-extensions/bin/warn_if_newer_patch $url "$ROOT_DIR/manifest.yml"

  downloaded_file=/tmp/$PYTHON_VERSION.tar.gz
  tar zxvf $downloaded_file -C .cloudfoundry/python &> /dev/null
  rm $downloaded_file
  echo "Downloaded [$filtered_url]"

  # Record for future reference.
  echo $PYTHON_VERSION > .cloudfoundry/python-version
  echo $STACK > .cloudfoundry/python-stack
  FRESH_PYTHON=true

  hash -r
fi

# If Pip isn't up to date:
if [ "$FRESH_PYTHON" ] || [[ ! $(pip --version) == *$PIP_VERSION* ]]; then
  WORKING_DIR=$(pwd)

  TMPTARDIR=$(mktemp -d)
  trap "rm -rf $TMPTARDIR" RETURN

  # Prepare it for the real world
  # puts-step "Installing Setuptools ($SETUPTOOLS_VERSION)"
  tar zxf $ROOT_DIR/vendor/setuptools-$SETUPTOOLS_VERSION.tar.gz -C $TMPTARDIR
  cd $TMPTARDIR/setuptools-$SETUPTOOLS_VERSION/
  python setup.py install &> /dev/null
  cd $WORKING_DIR

  # puts-step "Installing Pip ($PIP_VERSION)"
  tar zxf $ROOT_DIR/vendor/pip-$PIP_VERSION.tar.gz -C $TMPTARDIR
  cd $TMPTARDIR/pip-$PIP_VERSION/
  python setup.py install &> /dev/null
  cd $WORKING_DIR
fi

hash -r
